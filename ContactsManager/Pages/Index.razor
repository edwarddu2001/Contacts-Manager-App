@page "/"

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add Contact</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="firstName" Label="First Name" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="lastName" Label="Last Name" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="phoneNumber" Label="Phone Number" Variant="Variant.Text"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddButtonClicked">Add</MudButton>
    </MudCardContent>
</MudCard>

@*<MudTable>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Phone Number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>Joe</MudTd>
    </RowTemplate>
</MudTable>*@

@code {
    public string firstName { get; set; }
    public string lastName { get; set; }
    public string phoneNumber { get; set; }

    private void AddButtonClicked()
    {

    }
    @*
                // the .razor file
                        @page "/contactManager"
                <h3>Contact Manager</h3>

                <input type="text" placeholder="Name..." @bind="name" />
                <input type="text" placeholder="Phone number..." @bind="phoneNumber" />
                <button type="button" @onclick="AddContact">Add</button>

                <table>
                    <tr>
                        <th>Name</th>
                        <th>Phone Number</th>
                    </tr>
                    @foreach (var contact in contactsList)
                    {
                        <tr>
                            <td>@contact.Name</td>
                            <td>@contact.PhoneNumber</td>
                            <td><button type="button">X</button></td>
                        </tr>
                    }
                </table>

                @code {
                    Contacts contacts = new Contacts();
                    private List<Contacts> contactsList = new List<Contacts>();
                    private string name;
                    private string phoneNumber;

                    private void AddContact()
                    {
                        if (!(string.IsNullOrEmpty(name) && string.IsNullOrEmpty(phoneNumber)))
                        {
                            contactsList.Add(new Contacts()
                            {
                                Name = name,
                                PhoneNumber = phoneNumber
                            });
                            name = string.Empty;
                            phoneNumber = string.Empty;
                        }
                    }
                }

        // the .cs file
                using System;
        using System.ComponentModel.DataAnnotations;

        namespace ContactManagerApp
        {
            public class Contacts
            {
                [Required(ErrorMessage = "Name is required")]
                [StringLength(15, ErrorMessage = "Name is too long")]
                public string Name{ get; set; }

                [Required(ErrorMessage ="Phone number is required")]
                [Phone]
                public string PhoneNumber { get; set; }
            }
            //
        }

    *@
}