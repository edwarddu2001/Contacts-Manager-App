@page "/"
@inject MediatR.IMediator _mediator
@using System.ComponentModel.DataAnnotations

<EditForm Model="@contact" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <DataAnnotationsValidator/>
    <MudCard Elevation="25" Class="my-5">
        <MudCardContent>
            <MudTextField @bind-Value="@contact.Name" Label="Name" HelperText="Max. 10 characters, Min. 2 characters" Variant="Variant.Text" For="@(() => contact.Name)" />
            <MudTextField @bind-Value="@contact.PhoneNum" Label="Phone Number" Variant="Variant.Text" For="@(() => contact.PhoneNum)" />
            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddButtonClicked">Add</MudButton>
        </MudCardContent>
    </MudCard>
    <ValidationSummary />
    @if (@addError)
    {
        <MudAlert Severity="Severity.Error" Class="mt-5">@errorMessage</MudAlert>
    }
</EditForm>

<MudTable Items="@contacts" Hover="true" Elevation="25" Class="my-5">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Phone Number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNum</MudTd>
        <MudTd>
            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(()=>RemoveButtonClicked(@context.Name, @context.PhoneNum))"></MudFab>
            @if (@removeError)
            {
                <MudAlert Severity="Severity.Error" Class="mt-5">@errorMessage</MudAlert>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

<br />

@code {
    private void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
    }

    private void OnInvalidSubmit(EditContext context)
    {
        StateHasChanged();
    }

    private ContactsViewModel contact = new();
    private List<ContactsViewModel> contacts = new();
    private bool addError;
    private bool removeError;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        ResetErrors();
        await UpdateList();
    }

    private async Task UpdateList()
    {
        contacts = await _mediator.Send(new GetContactsQuery());
    }

    private void ResetErrors()
    {
        addError = false;
        removeError = false;
    }

    private async Task AddButtonClicked()
    {
        if (!(string.IsNullOrEmpty(contact.Name) || string.IsNullOrEmpty(contact.PhoneNum)))
        {
            bool response = await _mediator.Send(new AddContactCommand(contact));
            if (response)
            {
                await UpdateList();
            }
            else
            {
                addError = true;
                errorMessage = "Contact already exists";
            }
        } else
        {
            addError = true;
            errorMessage = "Empty fields";
        }
    }

    private async Task RemoveButtonClicked(string Name, string PhoneNumber)
    {
        ResetErrors();

        ContactsViewModel newContact = new ContactsViewModel()
        {
            Name = Name,
            PhoneNum = PhoneNumber
        };
        bool response = await _mediator.Send(new RemoveContactCommand(newContact));
        if (response)
        {
            await UpdateList();
        }
        else
        {
            removeError = true;
            errorMessage = "Contact does not exist";
        }
    }
}