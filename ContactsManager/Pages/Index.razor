@page "/"
@inject MediatR.IMediator _mediator

<MudCard Elevation="25" Class="my-5">
    <MudCardContent>
        <MudTextField @bind-Value="@contact.Name" Label="Name" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="@contact.PhoneNum" Label="Phone Number" Variant="Variant.Text"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddButtonClicked">Add</MudButton>
    </MudCardContent>
</MudCard>

<MudTable Items="@contacts" Hover="true" Elevation="25" Class="my-5">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Phone Number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNum</MudTd>
        <MudTd>
            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(()=>RemoveButtonClicked(@contact.Name, @contact.PhoneNum))"></MudFab>
        </MudTd>
    </RowTemplate>
</MudTable>

<br />

@code {
    private ContactsViewModel contact = new();
    private List<ContactsViewModel> contacts = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
    }

    private async Task UpdateList()
    {
        contacts = await _mediator.Send(new GetContactsQuery());
    }

    private async Task AddButtonClicked()
    {
        bool response = await _mediator.Send(new AddContactCommand(contact));
        if (response)
        {
            await UpdateList();
        }
        else
        {
            throw new ArgumentException("Contact is not valid");
        }
    }

    private async Task RemoveButtonClicked(string Name, string PhoneNumber)
    {
        ContactsViewModel newContact = new ContactsViewModel()
        {
            Name = Name,
            PhoneNum = PhoneNumber
        };
        bool response = await _mediator.Send(new RemoveContactCommand(newContact));
        if (response)
        {
            await UpdateList();
        } else
        {
            throw new ArgumentException("Contact does not exist");
        }
    }
}